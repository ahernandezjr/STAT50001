#' # 1) Flue Season in Nevada
flu = c(62,84,17,16,21)
library(UsingR)
#' # 1) Flue Season in Nevada
flu = c(62,84,17,16,21)
chisq.test(flu)
#' # 2) Olympic Medal Winners of 2016
winners = c(46,	29,	29, 38,	27,	22,
24,	25,	33, 29,	17,	19,
11,	19,	14)
winners_t = matrix(data = winners, nrow=5, byrow=TRUE)
colnames(winners_t) = c("Gold", "Silver", "Bronze")
rownames(winners_t) = c("United States", "China", "Russia",
"Britain", "Germany")
barplot(winners_t, col=c(1,2,3,4,5),
legend=rownames(winners_t),
main = "Medals Earned by Country (Stacking)")
barplot(winners_t, col=c(1,2,3,4,5), beside = T,
legend=rownames(winners_t),
main = "Medals Earned by Country (Side-by-Side)")
#' # 3) Health and Happiness
happiness = c(271,	261,	82,	20, 247,	567,	231,
53,  33,	103,	92,	36)
happiness_t = matrix(happiness, nrow=3, byrow=TRUE)
colnames(happiness_t) = c("Excellent", "Good", "Fair", "Poor")
rownames(happiness_t) = c("Very Happy" ,"Pretty Happy", "Not Too Happy")
chisq.test(happiness_t, )
#' # 4) Seat-Bels in California
# Ho: the data follows an equal distribution
# Ha: the data does not follow an equal distribution
seatbelts = c(56, 8, 2, 16)
seatbelts_t = matrix(seatbelts, nrow=2, byrow=TRUE)
colnames(seatbelts_t) = c("Buckled", "Unbuckled")
rownames(seatbelts_t) = c("Buckled", "Unbuckled")
seatbelts_t
chisq.test(seatbelts_t)
#' # 5) M&M Package Colors
# Ho: the data follows an equal distribution
# Ha: the data does not follow an equal distribution
data(mandms)
mandms
mms = c(15, 34, 7, 19, 29, 24)
p = c(0.1, 0.3, 0.1, 0.1, 0.2, 0.2)
chisq.test(mms, p=p)
#' # 6) Find the true source of candies
pe = c(0.2, 0.2, 0.1, 0.1, 0.2, 0.2)
chisq.test(mms, p=pe)
pb = c(0.2, 0.2, 0.2, 0, 0.2, 0.2)
chisq.test(mms, pb)
al = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6667, 16.6667)
chisq.test(mms, al)
km = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6667, 16.6667)
chisq.test(mms, km)
mandms
#' # 6) Find the true source of candies
pe = c(0.2, 0.2, 0.1, 0.1, 0.2, 0.2)
chisq.test(mms, p=pe)
pb = c(0.2, 0.2, 0.2, 0, 0.2, 0.2)
chisq.test(mms, pb)
al = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6667, 16.6667)
chisq.test(mms, al)
#' # 6) Find the true source of candies
pe = c(0.2, 0.2, 0.1, 0.1, 0.2, 0.2)
chisq.test(mms, p=pe)
pb = c(0.2, 0.2, 0.2, 0, 0.2, 0.2)
chisq.test(mms, p=pb)
al = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6667, 16.6667)
chisq.test(mms, p=al)
km = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6667, 16.6667)
chisq.test(mms, p=km)
al = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6667, 16.6665)
chisq.test(mms, p=al)
al = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6666, 16.6666)
chisq.test(mms, p=al)
al = c(16.6667, 16.6667, 16.6667, 16.6667, 16.6667, 16.6665)
chisq.test(mms, p=al)
al = c(16.667, 16.667, 16.667, 16.667, 16.667, 16.665)
chisq.test(mms, p=al)
al = c(100/6, 100/6, 100/6, 100/6, 100/6, 100/6)
chisq.test(mms, p=al)
mandms
al = c(0.167, 0.167, 0.167, 0.167, 0.167, 0.165)
chisq.test(mms, p=al)
km = c(0.167, 0.167, 0.167, 0.167, 0.167, 0.165)
chisq.test(mms, p=km)
#' # 6) Find the true source of candies
pe = c(0.2, 0.2, 0.1, 0.1, 0.2, 0.2)
chisq.test(mms, p=pe)
pb = c(0.2, 0.2, 0.2, 0, 0.2, 0.2)
chisq.test(mms, p=pb)
al = c(0.167, 0.167, 0.167, 0.167, 0.167, 0.165)
chisq.test(mms, p=al)
km = c(0.167, 0.167, 0.167, 0.167, 0.167, 0.165)
chisq.test(mms, p=km)
mandms
library(PASWR)
#' 1)
EDA(mnms)
#' 1)
EDA(cars)
#' 1)
EDA(iris)
#' 1)
EDA(iris$Sepal.Length)
shapiro.test(gas)
#' 1) Honda Accord Gas Mileage
gas = c(27,  26,  31,  30,  30,  28,  26,  24,  30,  30,  23,  30,  23)
shapiro.test(gas)
library(UsingR)
exec.pay
ks.test(gas, "punif", 2.5)
SIGN.test(balance, md=1770)
#' 2) Credit-card Balance from Mobilize.org
# Ho:
# Ha:
balance = c(6000, 870, 1530, 1660,
1060, 1790, 1630, 3180,
2180, 2370, 1800, 2170,
1210, 410, 1720, 1270,
570, 1050, 2320, 1120)
SIGN.test(balance, md=1770)
SIGN.test(balance, md=1770, conf.level=0.9)
#' 1) Honda Accord Gas Mileage
# Ho: The mileage data is not significantly different than a normal population
# Ha: The mileage data is significantly different than a normal population
gas = c(27,  26,  31,  30,  30,  28,  26,  24,  30,  30,  23,  30,  23)
shapiro.test(gas)
#' 3) CEO Salaries at Top 199 US Companies
SIGN.test(exec.pay, md=22)
#' 3) CEO Salaries at Top 199 US Companies
# Ho: CEO salary average is not significantly more than $220,000
# Ha: CEO salary average is significantly more than $220,000
SIGN.test(exec.pay, md=22, alt="greater")
library(PASWR)
#' # 1) Study Hours and Test Score
read.table("C:\\repos\\STAT 50001\\Lab 15\\hours_scores",
header=TRUE)
#' # 1) Study Hours and Test Score
read.table("C:\\repos\\STAT 50001\\Lab 15\\hours_scores.txt",
header=TRUE)
#' # 1) Study Hours and Test Score
students = read.table("C:\\repos\\STAT 50001\\Lab 15\\hours_scores.txt",
header=TRUE)
#' ## a) Pearson Correlation Coefficient
cor.test(students$Score, students$hours)
#' ## b) Spearman Correlation Coefficient
cor.test(students$Score, students$hours, method = "spearman")
#' ## c) Kendall's Tau
cor.test(students$Score, students$hours, method = "kendall")
#' ## b) Spearman Correlation Coefficient
cor.test(students$Score, students$hours,
method = "spearman", exact=FALSE)
#' ## c) Kendall's Tau
cor.test(students$Score, students$hours,
method="kendall", exact=FALSE)
#' # 1) Study Hours and Test Score
students = read.table("C:\\repos\\STAT 50001\\Lab 15\\hours_scores.txt",
header=TRUE)
#' ## a) Pearson Correlation Coefficient
cor.test(students$Score, students$hours)
#' ## b) Spearman Correlation Coefficient
cor.test(students$Score, students$hours,
method="spearman", exact=FALSE)
#' ## c) Kendall's Tau
cor.test(students$Score, students$hours,
method="kendall", exact=FALSE)
#' ## c) Kendall's Tau
cor.test(students$Score, students$hours,
method="kendall", exact=FALSE)$tau
#' ## c) Kendall's Tau
cor.test(students$Score, students$hours,
method="kendall", exact=FALSE)$p.value
#' ## d) For each method, test the hypothesis that the correlation is nonzero
# Ho: p == 0
# Ha: p != 0
cor.test(students$Score, students$hours)$p.value
cor.test(students$Score, students$hours,
method="spearman", exact=FALSE)$p.value
cor.test(students$Score, students$hours,
method="kendall", exact=FALSE)$p.value
#' # 2) GPA and SAT scores in Grades
#' ## a) Create scatterplot of the data for GPA and SAT scores
plot(Grades$gpa, Grades$sat)
#' # 2) GPA and SAT scores in Grades
#' ## a) Create scatterplot of the data for GPA and SAT scores
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score")
#' # 2) GPA and SAT scores in Grades
#' ## a) Create scatterplot of the data for GPA and SAT scores
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score", col=c(1,2))
#' # 2) GPA and SAT scores in Grades
#' ## a) Create scatterplot of the data for GPA and SAT scores
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score", col=c(1,2,3))
#' # 2) GPA and SAT scores in Grades
#' ## a) Create scatterplot of the data for GPA and SAT scores
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score", col=c(1,2,3,4,5))
#' # 2) GPA and SAT scores in Grades
#' ## a) Create scatterplot of the data for GPA and SAT scores
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score")
#' ## b2) State the estimated regression model
model = lm(Grades$gpa ~ Grades$sat)
#' ## b2) State the estimated regression model
lm(Grades$gpa ~ Grades$sat)
#' ## b2) State the estimated regression model
lm(Grades$sat~Grades$gpa)
#' ## b2) State the estimated regression model
model = lm(Grades$gpa ~ Grades$sat)
#' ## c) Display the regression model along with the scatterplot
abline(model)
#' ## c) Display the regression model along with the scatterplot
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score")
abline(model)
#' ## b2) State the estimated regression model
model = lm(Grades$sat~Grades$gpa)
#' ## c) Display the regression model along with the scatterplot
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score")
abline(model)
#' ## b) Perform analysis:
#' ### b1) Obtain the least squares estimates for B0 and B1
summary(Grades)
#' ## b) Perform analysis:
#' ### b1) Obtain the least squares estimates for B0 and B1
AIC(Grades)
#' ## b) Perform analysis:
#' ### b1) Obtain the least squares estimates for B0 and B1
AIC(Grades$gpa, Grades$sat)
#' ## b) Perform analysis:
#' ### b1) Obtain the least squares estimates for B0 and B1
summary(Grades$gpa, Grades$sat)
model
#' ### b2) State the estimated regression model
model = lm(Grades$sat ~ Grades$gpa)
model
#' ## c) Display the regression model along with the scatterplot
plot(Grades$gpa, Grades$sat,
main="Student GPA versus SAT Scores",
xlab="GPA", ylab="SAT Score")
abline(model)
